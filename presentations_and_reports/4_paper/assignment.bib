@inproceedings{ACM2017_Mirhosseini_AutomatedPullRequests,
    author = {Mirhosseini, Samim and Parnin, Chris},
    title = {Can Automated Pull Requests Encourage Software Developers to Upgrade Out-of-Date Dependencies?},
    year = {2017},
    isbn = {9781538626849},
    publisher = {IEEE Press},
    abstract = {
        Developers neglect to update legacy software dependencies, resulting in buggy and insecure software. One explanation for this neglect is the difficulty of constantly checking for the availability of new software updates, verifying their safety, and addressing any migration efforts needed when upgrading a dependency. Emerging tools attempt to address this problem by introducing automated pull requests and project badges to inform the developer of stale dependencies. To understand whether these tools actually help developers, we analyzed 7,470 GitHub projects that used these notification mechanisms to identify any change in upgrade behavior. Our results find that, on average, projects that use pull request notifications upgraded 1.6x as often as projects that did not use any tools. Badge notifications were slightly less effective: users upgraded 1.4x more frequently. Unfortunately, although pull request notifications are useful, developers are often overwhelmed by notifications: only a third of pull requests were actually merged. Through a survey, 62 developers indicated that their most significant concerns are breaking changes, understanding the implications of changes, and migration effort. The implications of our work suggests ways in which notifications can be improved to better align with developers' expectations and the need for new mechanisms to reduce notification fatigue and improve confidence in automated pull requests.
    },
    booktitle = {Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering},
    pages = {84–94},
    numpages = {11},
    keywords = {software dependencies, automated pull requests, notification fatigue},
    location = {Urbana-Champaign, IL, USA},
    series = {ASE 2017}
}

@INPROCEEDINGS{SANER2017_Xavier_HistoricalImpactAnalyisOfAPIBreakingChanges,
    author={L. {Xavier} and A. {Brito} and A. {Hora} and M. T. {Valente}},
    booktitle={2017 IEEE 24th International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
    title={Historical and impact analysis of API breaking changes: A large-scale study}, 
    year={2017},
    volume={},
    number={},
    pages={138-147},
    doi={10.1109/SANER.2017.7884616}
}

@INPROCEEDINGS {SANER2018_Brito_APIDiff,
    author = {A. Brito and L. Xavier and A. Hora and M. Valente},
    booktitle = {2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
    title = {APIDiff: Detecting API breaking changes},
    year = {2018},
    volume = {},
    issn = {},
    pages = {507-511},
    keywords = {libraries;tools;history;java;software;contracts},
    doi = {10.1109/SANER.2018.8330249},
    url = {https://doi.ieeecomputersociety.org/10.1109/SANER.2018.8330249},
    publisher = {IEEE Computer Society},
    address = {Los Alamitos, CA, USA},
    month = {mar}
}
@Article{ESE2020_Brito_YouBrokeMyCode,
    author={Brito, Aline
    and Valente, Marco Tulio
    and Xavier, Laerte
    and Hora, Andre},
    title={You broke my code: understanding the motivations for breaking changes in APIs},
    journal={Empirical Software Engineering},
    year={2020},
    month={Mar},
    day={01},
    volume={25},
    number={2},
    pages={1458-1492},
    abstract={As most software systems, libraries and frameworks also evolve, which may break existing clients. However, the main reasons to introduce breaking changes in APIs are unclear. Therefore, in this paper, we first report the results of an almost 4-month long field study with popular Java libraries and frameworks. We configured an infrastructure to observe all changes in these libraries and to detect breaking changes shortly after their introduction in the code. We detected possible breaking changes in 61 projects. After identifying breaking changes, we asked the developers to explain the reasons behind their decision to change the APIs. By analyzing the developers' answers, we report that breaking changes are mostly motivated by the need to implement new features, by the desire to make the APIs simpler and with fewer elements, and to improve maintainability. To complement this first study, we describe a second study, including the analysis of 110 Stack Overflow posts related to breaking changes. We reveal that breaking changes have an important impact on clients, since 45{\%} of the questions are from clients asking how to overcome specific breaking changes; they are also common in other ecosystems---JavaScript, .NET, etc. We conclude by providing suggestions to language designers, tool builders, software engineering researchers, and API developers.},
    issn={1573-7616},
    doi={10.1007/s10664-019-09756-z},
    url={https://doi.org/10.1007/s10664-019-09756-z}
}


@inproceedings{FSE2017_Abdalkareem_WhyUseTrivialPackages,
    author = {Abdalkareem, Rabe and Nourry, Olivier and Wehaibi, Sultan and Mujahid, Suhaib and Shihab, Emad},
    title = {Why Do Developers Use Trivial Packages? An Empirical Case Study on Npm},
    year = {2017},
    isbn = {9781450351058},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3106237.3106267},
    doi = {10.1145/3106237.3106267},
    abstract = { Code reuse is traditionally seen as good practice. Recent trends have pushed the concept of code reuse to an extreme, by using packages that implement simple and trivial tasks, which we call `trivial packages'. A recent incident where a trivial package led to the breakdown of some of the most popular web applications such as Facebook and Netflix made it imperative to question the growing use of trivial packages. Therefore, in this paper, we mine more than 230,000 npm packages and 38,000 JavaScript applications in order to study the prevalence of trivial packages. We found that trivial packages are common and are increasing in popularity, making up 16.8% of the studied npm packages. We performed a survey with 88 Node.js developers who use trivial packages to understand the reasons and drawbacks of their use. Our survey revealed that trivial packages are used because they are perceived to be well implemented and tested pieces of code. However, developers are concerned about maintaining and the risks of breakages due to the extra dependencies trivial packages introduce. To objectively verify the survey results, we empirically validate the most cited reason and drawback and find that, contrary to developers' beliefs, only 45.2% of trivial packages even have tests. However, trivial packages appear to be `deployment tested' and to have similar test, usage and community interest as non-trivial packages. On the other hand, we found that 11.5% of the studied trivial packages have more than 20 dependencies. Hence, developers should be careful about which trivial packages they decide to use. },
    booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
    pages = {385–395},
    numpages = {11},
    keywords = {JavaScript, Node.js, Empirical Studies, Code Reuse},
    location = {Paderborn, Germany},
    series = {ESEC/FSE 2017}
}

@Article{ESE2020_Abdalkareem_ImpactOfUsingTrivialPackages,
    author={Abdalkareem, Rabe
    and Oda, Vinicius
    and Mujahid, Suhaib
    and Shihab, Emad},
    title={On the impact of using trivial packages: an empirical case study on npm and PyPI},
    journal={Empirical Software Engineering},
    year={2020},
    month={Mar},
    day={01},
    volume={25},
    number={2},
    pages={1168-1204},
    abstract={Code reuse has traditionally been encouraged since it enables one to avoid re-inventing the wheel. Due to the npm left-pad package incident where a trivial package led to the breakdown of some of the most popular web applications such as Facebook and Netflix, some questioned such reuse. Reuse of trivial packages is particularly prevalent in platforms such as npm. To date, there is no study that examines the reason why developers reuse trivial packages other than in npm. Therefore, in this paper, we study two large platforms npm and PyPI. We mine more than 500,000 npm packages and 38,000 JavaScript applications and more than 63,000 PyPI packages and 14,000 Python applications to study the prevalence of trivial packages. We found that trivial packages are common, making up between 16.0{\%} to 10.5{\%} of the studied platforms. We performed surveys with 125 developers who use trivial packages to understand the reasons and drawbacks of their use. Our surveys revealed that trivial packages are used because they are perceived to be well implemented and tested pieces of code. However, developers are concerned about maintaining and the risks of breakages due to the extra dependencies trivial packages introduce. To objectively verify the survey results, we validate the most cited reason and drawback. We find that contrary to developers' beliefs only around 28{\%} of npm and 49{\%} PyPI trivial packages have tests. However, trivial packages appear to be `deployment tested' and to have similar test, usage and community interest as non-trivial packages. On the other hand, we found that 18.4{\%} and 2.9{\%} of the studied trivial packages have more than 20 dependencies in npm and PyPI, respectively.},
    issn={1573-7616},
    doi={10.1007/s10664-019-09792-9},
    url={https://doi.org/10.1007/s10664-019-09792-9}
}

@ARTICLE{2019CogoDowngrades,
    author={F. R. {Cogo} and G. A. {Oliva} and A. E. {Hassan}},
    journal={IEEE Transactions on Software Engineering}, 
    title={An Empirical Study of Dependency Downgrades in the npm Ecosystem}, 
    year={2019},
    volume={},
    number={},
    pages={1-1},
}

@article{2017_Kula_DoDevsUpdateTheirDependencys,
  author    = {Raula Gaikovina Kula and
               Daniel M. Germ{\'{a}}n and
               Ali Ouni and
               Takashi Ishio and
               Katsuro Inoue},
  title     = {Do Developers Update Their Library Dependencies? An Empirical Study
               on the Impact of Security Advisories on Library Migration},
  journal   = {CoRR},
  volume    = {abs/1709.04621},
  year      = {2017},
  url       = {http://arxiv.org/abs/1709.04621},
  archivePrefix = {arXiv},
  eprint    = {1709.04621},
  timestamp = {Mon, 13 Aug 2018 16:47:04 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-1709-04621.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}